---
title: "상호배타적 관계를 이용한 그룹 나누기"
date: 2021-04-02  
categories: 알고리즘
---

## 1. 적용 문제 : SWEA 5248 그룹나누기
문제 요약
서로 그룹이 되고 싶은 사람들을 적어내고 안적은 사람은 혼자 그룹

## 2. 문제 풀이 과정
1) N개의 리스트를 만들어 주어진 배열 입력의 요소들을 하나하나 비교하며 리스트에 append하는 방법
=> 어떻게 하다가 가능은 할거 같은데 절대 옳지 못한 방법이라 생각...

2) 상호배타적 관계를 이용해 그래프의 루트처럼 대표를 만들고 결국 대표로 비교하는 방법 힌트 얻음.
=> 그러나 해당 알고리즘.... 구현 실패.

3) 수업을 듣고 find_set 함수에대한 아이디어를 얻음.
4) 알고리즘을 완성하고 중복을 set함수로 제거했으나 그룹의 수를 뽑아내는데 실패.
=> 들어오는 순서에따라 대표가 나중에 들어오는 사람이 되기도 해서 하나의 그룹이 두개로 쪼개짐...
=> 10/3

5) 문제를 발견하고 값을 비교해 더 작은 값을 대표로 설정 계획
=> 순서가 차곡차곡 들어온다는 보장이 없음...

6) 수업을 마저 듣고 대표 자신이 대표인 경우를 찾아내는 방법 확인


## 3. 정답 코드
'''


T = int(input())
# T = 1

def find_set(x):
    while pa[x] != x:
        x = pa[x]
    return x

def union(N1, N2):

    pa[find_set(N2)] = find_set(N1)


for tc in range(T):
    N, M = map(int, input().split())

    a = list(map(int, input().split()))

    pa =list(range(N+1))

    # print(pa)

    for i in range(0, len(a), 2):
        union(a[i], a[i+1])

    # print(pa)
    # pa = set(pa)
    # pa = list(pa)
    # print(pa)
    cnt = 0
    for i in range(1, len(pa)):
        if pa[i] == i:
            cnt += 1

    print("#{} {}".format(tc+1, cnt))
'''

## 4. 깨달은 점 및 암기 코드

상호배타적 관계를 이해하고
find_set 함수를 암기

그룹의 수를 세는 방법은 아주 간단한데 
만약 실전에서 이 아이디어를 떠올리지 못했다면
이것 때문에 문제를 틀릴 가능성도 농후 ..

'''
def find_set(x):
    while pa[x] != x:
        x = pa[x]
    return x
'''

## 5. 최종 결론 한줄

5248 연산 -> 상호배타
find_set함수와 그룹 수 아이디어 암기.



